; Options: -q --produce-models --incremental --print-success --lang smt2.6
(declare-fun start!3194 () Bool)

(assert start!3194)

(declare-fun res!13624 () Bool)

(declare-fun e!8902 () Bool)

(assert (=> start!3194 (=> (not res!13624) (not e!8902))))

(declare-fun uintSizeInBytes!2 () (_ BitVec 32))

(declare-fun v!144 () (_ BitVec 64))

(declare-datatypes ((Unit!1196 0))(
  ( (Unit!1197) )
))
(declare-datatypes ((ControlFlow!19 0))(
  ( (Return!18 (value!772 (_ BitVec 64))) (Proceed!18 (value!773 Unit!1196)) )
))
(declare-fun Unit!1198 () Unit!1196)

(assert (=> start!3194 (= res!13624 (and (bvsge uintSizeInBytes!2 #b00000000000000000000000000000001) (bvsle uintSizeInBytes!2 #b00000000000000000000000000001001) (not (is-Return!18 (ite (bvsle (bvand v!144 (bvshl #b0000000000000000000000000000000000000000000000000000000010000000 ((_ sign_extend 32) (bvmul #b00000000000000000000000000001000 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001))))) #b0000000000000000000000000000000000000000000000000000000000000000) (Return!18 v!144) (Proceed!18 Unit!1198))))))))

(assert (=> start!3194 e!8902))

(assert (=> start!3194 true))

(declare-fun b!14425 () Bool)

(declare-fun lt!22040 () (_ BitVec 64))

(declare-fun lt!22039 () (_ BitVec 64))

(assert (=> b!14425 (= e!8902 (and (not (= lt!22040 #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= lt!22040 (bvand (bvsub lt!22039 #b0000000000000000000000000000000000000000000000000000000000000001) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> b!14425 (= lt!22040 (bvand lt!22039 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-datatypes ((tuple3!104 0))(
  ( (tuple3!105 (_1!899 Unit!1196) (_2!899 (_ BitVec 32)) (_3!58 (_ BitVec 64))) )
))
(declare-fun e!8903 () tuple3!104)

(assert (=> b!14425 (= lt!22039 (bvneg (bvnot (_3!58 e!8903))))))

(declare-fun c!995 () Bool)

(assert (=> b!14425 (= c!995 (bvsge #b00000000000000000000000000000111 uintSizeInBytes!2))))

(declare-fun b!14426 () Bool)

(declare-fun uint2intWhile!0 ((_ BitVec 32) (_ BitVec 64) (_ BitVec 32) (_ BitVec 64)) tuple3!104)

(assert (=> b!14426 (= e!8903 (uint2intWhile!0 uintSizeInBytes!2 v!144 #b00000000000000000000000000000111 v!144))))

(declare-fun b!14427 () Bool)

(declare-fun Unit!1199 () Unit!1196)

(assert (=> b!14427 (= e!8903 (tuple3!105 Unit!1199 #b00000000000000000000000000000111 v!144))))

(assert (= (and start!3194 res!13624) b!14425))

(assert (= (and b!14425 c!995) b!14426))

(assert (= (and b!14425 (not c!995)) b!14427))

(declare-fun m!20859 () Bool)

(assert (=> b!14426 m!20859))

(push 1)

(assert (not b!14426))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun d!4682 () Bool)

(declare-fun e!8933 () Bool)

(assert (=> d!4682 e!8933))

(declare-fun res!13647 () Bool)

(assert (=> d!4682 (=> (not res!13647) (not e!8933))))

(declare-fun lt!22087 () tuple3!104)

(declare-fun lt!22085 () (_ BitVec 32))

(assert (=> d!4682 (= res!13647 (bvsle (_2!899 lt!22087) (bvsub lt!22085 #b00000000000000000000000000000001)))))

(assert (=> d!4682 (or (= (bvand lt!22085 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand lt!22085 #b10000000000000000000000000000000) (bvand (bvsub lt!22085 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(assert (=> d!4682 (= lt!22085 #b00000000000000000000000000001000)))

(declare-fun e!8932 () tuple3!104)

(assert (=> d!4682 (= lt!22087 e!8932)))

(declare-fun c!1010 () Bool)

(declare-fun lt!22086 () (_ BitVec 32))

(assert (=> d!4682 (= c!1010 (bvsge lt!22086 uintSizeInBytes!2))))

(assert (=> d!4682 (= lt!22086 (bvsub #b00000000000000000000000000000111 #b00000000000000000000000000000001))))

(declare-fun lt!22088 () (_ BitVec 64))

(assert (=> d!4682 (= lt!22088 (bvor v!144 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111)))))

(assert (=> d!4682 (and (bvsle #b00000000000000000000000000000111 #b00000000000000000000000000000111) (bvsge #b00000000000000000000000000000111 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)) (bvsge #b00000000000000000000000000000111 uintSizeInBytes!2))))

(assert (=> d!4682 (= (uint2intWhile!0 uintSizeInBytes!2 v!144 #b00000000000000000000000000000111 v!144) lt!22087)))

(declare-fun b!14480 () Bool)

(declare-fun res!13648 () Bool)

(assert (=> b!14480 (=> (not res!13648) (not e!8933))))

(assert (=> b!14480 (= res!13648 (bvsge (_2!899 lt!22087) (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)))))

(assert (=> b!14480 (or (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) (bvand (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(declare-fun b!14479 () Bool)

(declare-fun Unit!1210 () Unit!1196)

(assert (=> b!14479 (= e!8932 (tuple3!105 Unit!1210 lt!22086 lt!22088))))

(declare-fun b!14481 () Bool)

(assert (=> b!14481 (= e!8933 (bvslt (_2!899 lt!22087) uintSizeInBytes!2))))

(declare-fun b!14478 () Bool)

(assert (=> b!14478 (= e!8932 (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!22086 lt!22088))))

(assert (= (and d!4682 c!1010) b!14478))

(assert (= (and d!4682 (not c!1010)) b!14479))

(assert (= (and d!4682 res!13647) b!14480))

(assert (= (and b!14480 res!13648) b!14481))

(declare-fun m!20873 () Bool)

(assert (=> d!4682 m!20873))

(declare-fun m!20875 () Bool)

(assert (=> b!14478 m!20875))

(assert (=> b!14426 d!4682))

(push 1)

(assert (not b!14478))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun d!4690 () Bool)

(declare-fun e!8939 () Bool)

(assert (=> d!4690 e!8939))

(declare-fun res!13653 () Bool)

(assert (=> d!4690 (=> (not res!13653) (not e!8939))))

(declare-fun lt!22099 () tuple3!104)

(declare-fun lt!22097 () (_ BitVec 32))

(assert (=> d!4690 (= res!13653 (bvsle (_2!899 lt!22099) (bvsub lt!22097 #b00000000000000000000000000000001)))))

(assert (=> d!4690 (or (= (bvand lt!22097 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand lt!22097 #b10000000000000000000000000000000) (bvand (bvsub lt!22097 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(assert (=> d!4690 (= lt!22097 #b00000000000000000000000000001000)))

(declare-fun e!8938 () tuple3!104)

(assert (=> d!4690 (= lt!22099 e!8938)))

(declare-fun c!1013 () Bool)

(declare-fun lt!22098 () (_ BitVec 32))

(assert (=> d!4690 (= c!1013 (bvsge lt!22098 uintSizeInBytes!2))))

(assert (=> d!4690 (= lt!22098 (bvsub lt!22086 #b00000000000000000000000000000001))))

(declare-fun lt!22100 () (_ BitVec 64))

(assert (=> d!4690 (= lt!22100 (bvor lt!22088 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) lt!22086)))))

(assert (=> d!4690 (and (bvsle lt!22086 #b00000000000000000000000000000111) (bvsge lt!22086 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)) (bvsge lt!22086 uintSizeInBytes!2))))

(assert (=> d!4690 (= (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!22086 lt!22088) lt!22099)))

(declare-fun b!14492 () Bool)

(declare-fun res!13654 () Bool)

(assert (=> b!14492 (=> (not res!13654) (not e!8939))))

(assert (=> b!14492 (= res!13654 (bvsge (_2!899 lt!22099) (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)))))

(assert (=> b!14492 (or (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) (bvand (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(declare-fun b!14491 () Bool)

(declare-fun Unit!1213 () Unit!1196)

(assert (=> b!14491 (= e!8938 (tuple3!105 Unit!1213 lt!22098 lt!22100))))

(declare-fun b!14493 () Bool)

(assert (=> b!14493 (= e!8939 (bvslt (_2!899 lt!22099) uintSizeInBytes!2))))

(declare-fun b!14490 () Bool)

(assert (=> b!14490 (= e!8938 (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!22098 lt!22100))))

(assert (= (and d!4690 c!1013) b!14490))

(assert (= (and d!4690 (not c!1013)) b!14491))

(assert (= (and d!4690 res!13653) b!14492))

(assert (= (and b!14492 res!13654) b!14493))

(declare-fun m!20885 () Bool)

(assert (=> d!4690 m!20885))

(declare-fun m!20887 () Bool)

(assert (=> b!14490 m!20887))

(assert (=> b!14478 d!4690))

(push 1)

(assert (not b!14490))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun d!4698 () Bool)

(declare-fun e!8947 () Bool)

(assert (=> d!4698 e!8947))

(declare-fun res!13661 () Bool)

(assert (=> d!4698 (=> (not res!13661) (not e!8947))))

(declare-fun lt!22115 () tuple3!104)

(declare-fun lt!22113 () (_ BitVec 32))

(assert (=> d!4698 (= res!13661 (bvsle (_2!899 lt!22115) (bvsub lt!22113 #b00000000000000000000000000000001)))))

(assert (=> d!4698 (or (= (bvand lt!22113 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand lt!22113 #b10000000000000000000000000000000) (bvand (bvsub lt!22113 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(assert (=> d!4698 (= lt!22113 #b00000000000000000000000000001000)))

(declare-fun e!8946 () tuple3!104)

(assert (=> d!4698 (= lt!22115 e!8946)))

(declare-fun c!1017 () Bool)

(declare-fun lt!22114 () (_ BitVec 32))

(assert (=> d!4698 (= c!1017 (bvsge lt!22114 uintSizeInBytes!2))))

(assert (=> d!4698 (= lt!22114 (bvsub lt!22098 #b00000000000000000000000000000001))))

(declare-fun lt!22116 () (_ BitVec 64))

(assert (=> d!4698 (= lt!22116 (bvor lt!22100 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) lt!22098)))))

(assert (=> d!4698 (and (bvsle lt!22098 #b00000000000000000000000000000111) (bvsge lt!22098 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)) (bvsge lt!22098 uintSizeInBytes!2))))

(assert (=> d!4698 (= (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!22098 lt!22100) lt!22115)))

(declare-fun b!14508 () Bool)

(declare-fun res!13662 () Bool)

(assert (=> b!14508 (=> (not res!13662) (not e!8947))))

(assert (=> b!14508 (= res!13662 (bvsge (_2!899 lt!22115) (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)))))

(assert (=> b!14508 (or (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) (bvand (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(declare-fun b!14507 () Bool)

(declare-fun Unit!1217 () Unit!1196)

(assert (=> b!14507 (= e!8946 (tuple3!105 Unit!1217 lt!22114 lt!22116))))

(declare-fun b!14509 () Bool)

(assert (=> b!14509 (= e!8947 (bvslt (_2!899 lt!22115) uintSizeInBytes!2))))

(declare-fun b!14506 () Bool)

(assert (=> b!14506 (= e!8946 (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!22114 lt!22116))))

(assert (= (and d!4698 c!1017) b!14506))

(assert (= (and d!4698 (not c!1017)) b!14507))

(assert (= (and d!4698 res!13661) b!14508))

(assert (= (and b!14508 res!13662) b!14509))

(declare-fun m!20901 () Bool)

(assert (=> d!4698 m!20901))

(declare-fun m!20903 () Bool)

(assert (=> b!14506 m!20903))

(assert (=> b!14490 d!4698))

(push 1)

(assert (not b!14506))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun d!4706 () Bool)

(declare-fun e!8955 () Bool)

(assert (=> d!4706 e!8955))

(declare-fun res!13669 () Bool)

(assert (=> d!4706 (=> (not res!13669) (not e!8955))))

(declare-fun lt!22131 () tuple3!104)

(declare-fun lt!22129 () (_ BitVec 32))

(assert (=> d!4706 (= res!13669 (bvsle (_2!899 lt!22131) (bvsub lt!22129 #b00000000000000000000000000000001)))))

(assert (=> d!4706 (or (= (bvand lt!22129 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand lt!22129 #b10000000000000000000000000000000) (bvand (bvsub lt!22129 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(assert (=> d!4706 (= lt!22129 #b00000000000000000000000000001000)))

(declare-fun e!8954 () tuple3!104)

(assert (=> d!4706 (= lt!22131 e!8954)))

(declare-fun c!1021 () Bool)

(declare-fun lt!22130 () (_ BitVec 32))

(assert (=> d!4706 (= c!1021 (bvsge lt!22130 uintSizeInBytes!2))))

(assert (=> d!4706 (= lt!22130 (bvsub lt!22114 #b00000000000000000000000000000001))))

(declare-fun lt!22132 () (_ BitVec 64))

(assert (=> d!4706 (= lt!22132 (bvor lt!22116 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) lt!22114)))))

(assert (=> d!4706 (and (bvsle lt!22114 #b00000000000000000000000000000111) (bvsge lt!22114 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)) (bvsge lt!22114 uintSizeInBytes!2))))

(assert (=> d!4706 (= (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!22114 lt!22116) lt!22131)))

(declare-fun b!14524 () Bool)

(declare-fun res!13670 () Bool)

(assert (=> b!14524 (=> (not res!13670) (not e!8955))))

(assert (=> b!14524 (= res!13670 (bvsge (_2!899 lt!22131) (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)))))

(assert (=> b!14524 (or (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) (bvand (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(declare-fun b!14523 () Bool)

(declare-fun Unit!1221 () Unit!1196)

(assert (=> b!14523 (= e!8954 (tuple3!105 Unit!1221 lt!22130 lt!22132))))

(declare-fun b!14525 () Bool)

(assert (=> b!14525 (= e!8955 (bvslt (_2!899 lt!22131) uintSizeInBytes!2))))

(declare-fun b!14522 () Bool)

(assert (=> b!14522 (= e!8954 (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!22130 lt!22132))))

(assert (= (and d!4706 c!1021) b!14522))

(assert (= (and d!4706 (not c!1021)) b!14523))

(assert (= (and d!4706 res!13669) b!14524))

(assert (= (and b!14524 res!13670) b!14525))

(declare-fun m!20917 () Bool)

(assert (=> d!4706 m!20917))

(declare-fun m!20919 () Bool)

(assert (=> b!14522 m!20919))

(assert (=> b!14506 d!4706))

(push 1)

(assert (not b!14522))

(check-sat)

