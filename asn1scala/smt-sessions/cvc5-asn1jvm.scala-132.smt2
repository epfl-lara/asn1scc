; Options: -q --produce-models --incremental --print-success --lang smt2.6
(declare-fun start!3182 () Bool)

(assert start!3182)

(declare-fun res!13573 () Bool)

(declare-fun e!8842 () Bool)

(assert (=> start!3182 (=> (not res!13573) (not e!8842))))

(declare-fun uintSizeInBytes!2 () (_ BitVec 32))

(declare-fun v!144 () (_ BitVec 64))

(declare-datatypes ((Unit!1169 0))(
  ( (Unit!1170) )
))
(declare-datatypes ((ControlFlow!16 0))(
  ( (Return!15 (value!761 (_ BitVec 64))) (Proceed!15 (value!762 Unit!1169)) )
))
(declare-fun Unit!1171 () Unit!1169)

(assert (=> start!3182 (= res!13573 (and (bvsge uintSizeInBytes!2 #b00000000000000000000000000000001) (bvsle uintSizeInBytes!2 #b00000000000000000000000000001001) (not (is-Return!15 (ite (bvsle (bvand v!144 (bvshl #b0000000000000000000000000000000000000000000000000000000010000000 ((_ sign_extend 32) (bvmul #b00000000000000000000000000001000 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001))))) #b0000000000000000000000000000000000000000000000000000000000000000) (Return!15 v!144) (Proceed!15 Unit!1171))))))))

(assert (=> start!3182 e!8842))

(assert (=> start!3182 true))

(declare-fun b!14314 () Bool)

(declare-datatypes ((tuple3!98 0))(
  ( (tuple3!99 (_1!896 Unit!1169) (_2!896 (_ BitVec 32)) (_3!55 (_ BitVec 64))) )
))
(declare-fun e!8843 () tuple3!98)

(assert (=> b!14314 (= e!8842 (= (bvnot (_3!55 e!8843)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!965 () Bool)

(assert (=> b!14314 (= c!965 (bvsge #b00000000000000000000000000000111 uintSizeInBytes!2))))

(declare-fun b!14315 () Bool)

(declare-fun uint2intWhile!0 ((_ BitVec 32) (_ BitVec 64) (_ BitVec 32) (_ BitVec 64)) tuple3!98)

(assert (=> b!14315 (= e!8843 (uint2intWhile!0 uintSizeInBytes!2 v!144 #b00000000000000000000000000000111 v!144))))

(declare-fun b!14316 () Bool)

(declare-fun Unit!1172 () Unit!1169)

(assert (=> b!14316 (= e!8843 (tuple3!99 Unit!1172 #b00000000000000000000000000000111 v!144))))

(assert (= (and start!3182 res!13573) b!14314))

(assert (= (and b!14314 c!965) b!14315))

(assert (= (and b!14314 (not c!965)) b!14316))

(declare-fun m!20793 () Bool)

(assert (=> b!14315 m!20793))

(push 1)

(assert (not b!14315))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun b!14357 () Bool)

(declare-fun res!13590 () Bool)

(declare-fun e!8866 () Bool)

(assert (=> b!14357 (=> (not res!13590) (not e!8866))))

(declare-fun lt!21972 () tuple3!98)

(assert (=> b!14357 (= res!13590 (bvsge (_2!896 lt!21972) (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)))))

(assert (=> b!14357 (or (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) (bvand (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(declare-fun b!14356 () Bool)

(declare-fun e!8867 () tuple3!98)

(declare-fun lt!21973 () (_ BitVec 32))

(declare-fun lt!21974 () (_ BitVec 64))

(declare-fun Unit!1182 () Unit!1169)

(assert (=> b!14356 (= e!8867 (tuple3!99 Unit!1182 lt!21973 lt!21974))))

(declare-fun b!14355 () Bool)

(assert (=> b!14355 (= e!8867 (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!21973 lt!21974))))

(declare-fun d!4650 () Bool)

(assert (=> d!4650 e!8866))

(declare-fun res!13591 () Bool)

(assert (=> d!4650 (=> (not res!13591) (not e!8866))))

(declare-fun lt!21971 () (_ BitVec 32))

(assert (=> d!4650 (= res!13591 (bvsle (_2!896 lt!21972) (bvsub lt!21971 #b00000000000000000000000000000001)))))

(assert (=> d!4650 (or (= (bvand lt!21971 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand lt!21971 #b10000000000000000000000000000000) (bvand (bvsub lt!21971 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(assert (=> d!4650 (= lt!21971 #b00000000000000000000000000001000)))

(assert (=> d!4650 (= lt!21972 e!8867)))

(declare-fun c!977 () Bool)

(assert (=> d!4650 (= c!977 (bvsge lt!21973 uintSizeInBytes!2))))

(assert (=> d!4650 (= lt!21973 (bvsub #b00000000000000000000000000000111 #b00000000000000000000000000000001))))

(assert (=> d!4650 (= lt!21974 (bvor v!144 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111)))))

(assert (=> d!4650 (and (bvsle #b00000000000000000000000000000111 #b00000000000000000000000000000111) (bvsge #b00000000000000000000000000000111 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)) (bvsge #b00000000000000000000000000000111 uintSizeInBytes!2))))

(assert (=> d!4650 (= (uint2intWhile!0 uintSizeInBytes!2 v!144 #b00000000000000000000000000000111 v!144) lt!21972)))

(declare-fun b!14358 () Bool)

(assert (=> b!14358 (= e!8866 (bvslt (_2!896 lt!21972) uintSizeInBytes!2))))

(assert (= (and d!4650 c!977) b!14355))

(assert (= (and d!4650 (not c!977)) b!14356))

(assert (= (and d!4650 res!13591) b!14357))

(assert (= (and b!14357 res!13590) b!14358))

(declare-fun m!20803 () Bool)

(assert (=> b!14355 m!20803))

(declare-fun m!20805 () Bool)

(assert (=> d!4650 m!20805))

(assert (=> b!14315 d!4650))

(push 1)

(assert (not b!14355))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun b!14377 () Bool)

(declare-fun res!13600 () Bool)

(declare-fun e!8876 () Bool)

(assert (=> b!14377 (=> (not res!13600) (not e!8876))))

(declare-fun lt!21992 () tuple3!98)

(assert (=> b!14377 (= res!13600 (bvsge (_2!896 lt!21992) (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)))))

(assert (=> b!14377 (or (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) (bvand (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(declare-fun b!14376 () Bool)

(declare-fun e!8877 () tuple3!98)

(declare-fun lt!21993 () (_ BitVec 32))

(declare-fun lt!21994 () (_ BitVec 64))

(declare-fun Unit!1185 () Unit!1169)

(assert (=> b!14376 (= e!8877 (tuple3!99 Unit!1185 lt!21993 lt!21994))))

(declare-fun b!14375 () Bool)

(assert (=> b!14375 (= e!8877 (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!21993 lt!21994))))

(declare-fun d!4656 () Bool)

(assert (=> d!4656 e!8876))

(declare-fun res!13601 () Bool)

(assert (=> d!4656 (=> (not res!13601) (not e!8876))))

(declare-fun lt!21991 () (_ BitVec 32))

(assert (=> d!4656 (= res!13601 (bvsle (_2!896 lt!21992) (bvsub lt!21991 #b00000000000000000000000000000001)))))

(assert (=> d!4656 (or (= (bvand lt!21991 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand lt!21991 #b10000000000000000000000000000000) (bvand (bvsub lt!21991 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(assert (=> d!4656 (= lt!21991 #b00000000000000000000000000001000)))

(assert (=> d!4656 (= lt!21992 e!8877)))

(declare-fun c!982 () Bool)

(assert (=> d!4656 (= c!982 (bvsge lt!21993 uintSizeInBytes!2))))

(assert (=> d!4656 (= lt!21993 (bvsub lt!21973 #b00000000000000000000000000000001))))

(assert (=> d!4656 (= lt!21994 (bvor lt!21974 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) lt!21973)))))

(assert (=> d!4656 (and (bvsle lt!21973 #b00000000000000000000000000000111) (bvsge lt!21973 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)) (bvsge lt!21973 uintSizeInBytes!2))))

(assert (=> d!4656 (= (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!21973 lt!21974) lt!21992)))

(declare-fun b!14378 () Bool)

(assert (=> b!14378 (= e!8876 (bvslt (_2!896 lt!21992) uintSizeInBytes!2))))

(assert (= (and d!4656 c!982) b!14375))

(assert (= (and d!4656 (not c!982)) b!14376))

(assert (= (and d!4656 res!13601) b!14377))

(assert (= (and b!14377 res!13600) b!14378))

(declare-fun m!20815 () Bool)

(assert (=> b!14375 m!20815))

(declare-fun m!20817 () Bool)

(assert (=> d!4656 m!20817))

(assert (=> b!14355 d!4656))

(push 1)

(assert (not b!14375))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun b!14389 () Bool)

(declare-fun res!13606 () Bool)

(declare-fun e!8882 () Bool)

(assert (=> b!14389 (=> (not res!13606) (not e!8882))))

(declare-fun lt!22004 () tuple3!98)

(assert (=> b!14389 (= res!13606 (bvsge (_2!896 lt!22004) (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)))))

(assert (=> b!14389 (or (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) (bvand (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(declare-fun b!14388 () Bool)

(declare-fun e!8883 () tuple3!98)

(declare-fun lt!22005 () (_ BitVec 32))

(declare-fun lt!22006 () (_ BitVec 64))

(declare-fun Unit!1188 () Unit!1169)

(assert (=> b!14388 (= e!8883 (tuple3!99 Unit!1188 lt!22005 lt!22006))))

(declare-fun b!14387 () Bool)

(assert (=> b!14387 (= e!8883 (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!22005 lt!22006))))

(declare-fun d!4662 () Bool)

(assert (=> d!4662 e!8882))

(declare-fun res!13607 () Bool)

(assert (=> d!4662 (=> (not res!13607) (not e!8882))))

(declare-fun lt!22003 () (_ BitVec 32))

(assert (=> d!4662 (= res!13607 (bvsle (_2!896 lt!22004) (bvsub lt!22003 #b00000000000000000000000000000001)))))

(assert (=> d!4662 (or (= (bvand lt!22003 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand lt!22003 #b10000000000000000000000000000000) (bvand (bvsub lt!22003 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(assert (=> d!4662 (= lt!22003 #b00000000000000000000000000001000)))

(assert (=> d!4662 (= lt!22004 e!8883)))

(declare-fun c!985 () Bool)

(assert (=> d!4662 (= c!985 (bvsge lt!22005 uintSizeInBytes!2))))

(assert (=> d!4662 (= lt!22005 (bvsub lt!21993 #b00000000000000000000000000000001))))

(assert (=> d!4662 (= lt!22006 (bvor lt!21994 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) lt!21993)))))

(assert (=> d!4662 (and (bvsle lt!21993 #b00000000000000000000000000000111) (bvsge lt!21993 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)) (bvsge lt!21993 uintSizeInBytes!2))))

(assert (=> d!4662 (= (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!21993 lt!21994) lt!22004)))

(declare-fun b!14390 () Bool)

(assert (=> b!14390 (= e!8882 (bvslt (_2!896 lt!22004) uintSizeInBytes!2))))

(assert (= (and d!4662 c!985) b!14387))

(assert (= (and d!4662 (not c!985)) b!14388))

(assert (= (and d!4662 res!13607) b!14389))

(assert (= (and b!14389 res!13606) b!14390))

(declare-fun m!20827 () Bool)

(assert (=> b!14387 m!20827))

(declare-fun m!20829 () Bool)

(assert (=> d!4662 m!20829))

(assert (=> b!14375 d!4662))

(push 1)

(assert (not b!14387))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun b!14409 () Bool)

(declare-fun res!13616 () Bool)

(declare-fun e!8892 () Bool)

(assert (=> b!14409 (=> (not res!13616) (not e!8892))))

(declare-fun lt!22024 () tuple3!98)

(assert (=> b!14409 (= res!13616 (bvsge (_2!896 lt!22024) (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)))))

(assert (=> b!14409 (or (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) (bvand (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(declare-fun b!14408 () Bool)

(declare-fun e!8893 () tuple3!98)

(declare-fun lt!22025 () (_ BitVec 32))

(declare-fun lt!22026 () (_ BitVec 64))

(declare-fun Unit!1193 () Unit!1169)

(assert (=> b!14408 (= e!8893 (tuple3!99 Unit!1193 lt!22025 lt!22026))))

(declare-fun b!14407 () Bool)

(assert (=> b!14407 (= e!8893 (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!22025 lt!22026))))

(declare-fun d!4672 () Bool)

(assert (=> d!4672 e!8892))

(declare-fun res!13617 () Bool)

(assert (=> d!4672 (=> (not res!13617) (not e!8892))))

(declare-fun lt!22023 () (_ BitVec 32))

(assert (=> d!4672 (= res!13617 (bvsle (_2!896 lt!22024) (bvsub lt!22023 #b00000000000000000000000000000001)))))

(assert (=> d!4672 (or (= (bvand lt!22023 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand lt!22023 #b10000000000000000000000000000000) (bvand (bvsub lt!22023 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(assert (=> d!4672 (= lt!22023 #b00000000000000000000000000001000)))

(assert (=> d!4672 (= lt!22024 e!8893)))

(declare-fun c!990 () Bool)

(assert (=> d!4672 (= c!990 (bvsge lt!22025 uintSizeInBytes!2))))

(assert (=> d!4672 (= lt!22025 (bvsub lt!22005 #b00000000000000000000000000000001))))

(assert (=> d!4672 (= lt!22026 (bvor lt!22006 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) lt!22005)))))

(assert (=> d!4672 (and (bvsle lt!22005 #b00000000000000000000000000000111) (bvsge lt!22005 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)) (bvsge lt!22005 uintSizeInBytes!2))))

(assert (=> d!4672 (= (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!22005 lt!22006) lt!22024)))

(declare-fun b!14410 () Bool)

(assert (=> b!14410 (= e!8892 (bvslt (_2!896 lt!22024) uintSizeInBytes!2))))

(assert (= (and d!4672 c!990) b!14407))

(assert (= (and d!4672 (not c!990)) b!14408))

(assert (= (and d!4672 res!13617) b!14409))

(assert (= (and b!14409 res!13616) b!14410))

(declare-fun m!20847 () Bool)

(assert (=> b!14407 m!20847))

(declare-fun m!20849 () Bool)

(assert (=> d!4672 m!20849))

(assert (=> b!14387 d!4672))

(push 1)

(assert (not b!14407))

(check-sat)

(pop 1)

(push 1)

(check-sat)

