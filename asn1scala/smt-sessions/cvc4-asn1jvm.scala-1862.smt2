; Options: -q --produce-models --incremental --print-success --lang smt2.6
(declare-fun start!49438 () Bool)

(assert start!49438)

(declare-fun from2!7 () (_ BitVec 64))

(declare-datatypes ((array!12236 0))(
  ( (array!12237 (arr!6363 (Array (_ BitVec 32) (_ BitVec 8))) (size!5376 (_ BitVec 32))) )
))
(declare-fun arr2!24 () array!12236)

(declare-fun nBits!495 () (_ BitVec 64))

(declare-fun arr1!24 () array!12236)

(declare-fun from1!7 () (_ BitVec 64))

(assert (=> start!49438 (and (bvsge from1!7 #b0000000000000000000000000000000000000000000000000000000000000000) (bvsge from2!7 #b0000000000000000000000000000000000000000000000000000000000000000) (bvsge nBits!495 #b0000000000000000000000000000000000000000000000000000000000000000) (bvslt from2!7 (bvsub #b0111111111111111111111111111111111111111111111111111111111111111 nBits!495)) (bvslt from1!7 (bvsub #b0111111111111111111111111111111111111111111111111111111111111111 nBits!495)) (bvsle (bvadd from1!7 nBits!495) (bvmul #b0000000000000000000000000000000000000000000000000000000000001000 ((_ sign_extend 32) (size!5376 arr1!24)))) (bvsle (bvadd from2!7 nBits!495) (bvmul #b0000000000000000000000000000000000000000000000000000000000001000 ((_ sign_extend 32) (size!5376 arr2!24)))) (not (= nBits!495 #b0000000000000000000000000000000000000000000000000000000000000000)) (= (not (= (bvand ((_ sign_extend 24) (select (arr!6363 arr1!24) ((_ extract 31 0) (bvsdiv from1!7 #b0000000000000000000000000000000000000000000000000000000000001000)))) ((_ sign_extend 24) (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #b00000000) #b00000000000000000000000000000000 #b10000000) #b00000000000000000000000000000001 #b01000000) #b00000000000000000000000000000010 #b00100000) #b00000000000000000000000000000011 #b00010000) #b00000000000000000000000000000100 #b00001000) #b00000000000000000000000000000101 #b00000100) #b00000000000000000000000000000110 #b00000010) #b00000000000000000000000000000111 #b00000001) ((_ extract 31 0) (bvsrem from1!7 #b0000000000000000000000000000000000000000000000000000000000001000))))) #b00000000000000000000000000000000)) (not (= (bvand ((_ sign_extend 24) (select (arr!6363 arr2!24) ((_ extract 31 0) (bvsdiv from2!7 #b0000000000000000000000000000000000000000000000000000000000001000)))) ((_ sign_extend 24) (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #b00000000) #b00000000000000000000000000000000 #b10000000) #b00000000000000000000000000000001 #b01000000) #b00000000000000000000000000000010 #b00100000) #b00000000000000000000000000000011 #b00010000) #b00000000000000000000000000000100 #b00001000) #b00000000000000000000000000000101 #b00000100) #b00000000000000000000000000000110 #b00000010) #b00000000000000000000000000000111 #b00000001) ((_ extract 31 0) (bvsrem from2!7 #b0000000000000000000000000000000000000000000000000000000000001000))))) #b00000000000000000000000000000000))) (not (= (bvand nBits!495 #b1000000000000000000000000000000000000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (bvand nBits!495 #b1000000000000000000000000000000000000000000000000000000000000000) (bvand (bvsub nBits!495 #b0000000000000000000000000000000000000000000000000000000000000001) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> start!49438 true))

(declare-fun array_inv!5117 (array!12236) Bool)

(assert (=> start!49438 (array_inv!5117 arr2!24)))

(assert (=> start!49438 (array_inv!5117 arr1!24)))

(declare-fun bs!19569 () Bool)

(assert (= bs!19569 start!49438))

(declare-fun m!356813 () Bool)

(assert (=> bs!19569 m!356813))

(declare-fun m!356815 () Bool)

(assert (=> bs!19569 m!356815))

(declare-fun m!356817 () Bool)

(assert (=> bs!19569 m!356817))

(declare-fun m!356819 () Bool)

(assert (=> bs!19569 m!356819))

(declare-fun m!356821 () Bool)

(assert (=> bs!19569 m!356821))

(declare-fun m!356823 () Bool)

(assert (=> bs!19569 m!356823))

(push 1)

(assert (not start!49438))

(check-sat)

(pop 1)

(push 1)

(check-sat)

