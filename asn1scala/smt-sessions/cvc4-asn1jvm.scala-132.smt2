; Options: -q --produce-models --incremental --print-success --lang smt2.6
(declare-fun start!3186 () Bool)

(assert start!3186)

(declare-fun res!13579 () Bool)

(declare-fun e!8854 () Bool)

(assert (=> start!3186 (=> (not res!13579) (not e!8854))))

(declare-fun uintSizeInBytes!2 () (_ BitVec 32))

(declare-fun v!144 () (_ BitVec 64))

(declare-datatypes ((Unit!1177 0))(
  ( (Unit!1178) )
))
(declare-datatypes ((ControlFlow!18 0))(
  ( (Return!17 (value!765 (_ BitVec 64))) (Proceed!17 (value!766 Unit!1177)) )
))
(declare-fun Unit!1179 () Unit!1177)

(assert (=> start!3186 (= res!13579 (and (bvsge uintSizeInBytes!2 #b00000000000000000000000000000001) (bvsle uintSizeInBytes!2 #b00000000000000000000000000001001) (not (is-Return!17 (ite (bvsle (bvand v!144 (bvshl #b0000000000000000000000000000000000000000000000000000000010000000 ((_ sign_extend 32) (bvmul #b00000000000000000000000000001000 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001))))) #b0000000000000000000000000000000000000000000000000000000000000000) (Return!17 v!144) (Proceed!17 Unit!1179))))))))

(assert (=> start!3186 e!8854))

(assert (=> start!3186 true))

(declare-fun b!14332 () Bool)

(declare-datatypes ((tuple3!102 0))(
  ( (tuple3!103 (_1!898 Unit!1177) (_2!898 (_ BitVec 32)) (_3!57 (_ BitVec 64))) )
))
(declare-fun e!8855 () tuple3!102)

(assert (=> b!14332 (= e!8854 (= (bvnot (_3!57 e!8855)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!971 () Bool)

(assert (=> b!14332 (= c!971 (bvsge #b00000000000000000000000000000111 uintSizeInBytes!2))))

(declare-fun b!14333 () Bool)

(declare-fun uint2intWhile!0 ((_ BitVec 32) (_ BitVec 64) (_ BitVec 32) (_ BitVec 64)) tuple3!102)

(assert (=> b!14333 (= e!8855 (uint2intWhile!0 uintSizeInBytes!2 v!144 #b00000000000000000000000000000111 v!144))))

(declare-fun b!14334 () Bool)

(declare-fun Unit!1180 () Unit!1177)

(assert (=> b!14334 (= e!8855 (tuple3!103 Unit!1180 #b00000000000000000000000000000111 v!144))))

(assert (= (and start!3186 res!13579) b!14332))

(assert (= (and b!14332 c!971) b!14333))

(assert (= (and b!14332 (not c!971)) b!14334))

(declare-fun m!20797 () Bool)

(assert (=> b!14333 m!20797))

(push 1)

(assert (not b!14333))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun b!14370 () Bool)

(declare-fun e!8872 () Bool)

(declare-fun lt!21985 () tuple3!102)

(assert (=> b!14370 (= e!8872 (bvslt (_2!898 lt!21985) uintSizeInBytes!2))))

(declare-fun b!14369 () Bool)

(declare-fun res!13597 () Bool)

(assert (=> b!14369 (=> (not res!13597) (not e!8872))))

(assert (=> b!14369 (= res!13597 (bvsge (_2!898 lt!21985) (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)))))

(assert (=> b!14369 (or (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) (bvand (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(declare-fun lt!21983 () (_ BitVec 32))

(declare-fun lt!21984 () (_ BitVec 64))

(declare-fun e!8873 () tuple3!102)

(declare-fun b!14367 () Bool)

(assert (=> b!14367 (= e!8873 (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!21983 lt!21984))))

(declare-fun d!4652 () Bool)

(assert (=> d!4652 e!8872))

(declare-fun res!13596 () Bool)

(assert (=> d!4652 (=> (not res!13596) (not e!8872))))

(declare-fun lt!21986 () (_ BitVec 32))

(assert (=> d!4652 (= res!13596 (bvsle (_2!898 lt!21985) (bvsub lt!21986 #b00000000000000000000000000000001)))))

(assert (=> d!4652 (or (= (bvand lt!21986 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand lt!21986 #b10000000000000000000000000000000) (bvand (bvsub lt!21986 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(assert (=> d!4652 (= lt!21986 #b00000000000000000000000000001000)))

(assert (=> d!4652 (= lt!21985 e!8873)))

(declare-fun c!980 () Bool)

(assert (=> d!4652 (= c!980 (bvsge lt!21983 uintSizeInBytes!2))))

(assert (=> d!4652 (= lt!21983 (bvsub #b00000000000000000000000000000111 #b00000000000000000000000000000001))))

(assert (=> d!4652 (= lt!21984 (bvor v!144 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111)))))

(assert (=> d!4652 (and (bvsle #b00000000000000000000000000000111 #b00000000000000000000000000000111) (bvsge #b00000000000000000000000000000111 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)) (bvsge #b00000000000000000000000000000111 uintSizeInBytes!2))))

(assert (=> d!4652 (= (uint2intWhile!0 uintSizeInBytes!2 v!144 #b00000000000000000000000000000111 v!144) lt!21985)))

(declare-fun b!14368 () Bool)

(declare-fun Unit!1184 () Unit!1177)

(assert (=> b!14368 (= e!8873 (tuple3!103 Unit!1184 lt!21983 lt!21984))))

(assert (= (and d!4652 c!980) b!14367))

(assert (= (and d!4652 (not c!980)) b!14368))

(assert (= (and d!4652 res!13596) b!14369))

(assert (= (and b!14369 res!13597) b!14370))

(declare-fun m!20807 () Bool)

(assert (=> b!14367 m!20807))

(declare-fun m!20809 () Bool)

(assert (=> d!4652 m!20809))

(assert (=> b!14333 d!4652))

(push 1)

(assert (not b!14367))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun b!14386 () Bool)

(declare-fun e!8880 () Bool)

(declare-fun lt!22001 () tuple3!102)

(assert (=> b!14386 (= e!8880 (bvslt (_2!898 lt!22001) uintSizeInBytes!2))))

(declare-fun b!14385 () Bool)

(declare-fun res!13605 () Bool)

(assert (=> b!14385 (=> (not res!13605) (not e!8880))))

(assert (=> b!14385 (= res!13605 (bvsge (_2!898 lt!22001) (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)))))

(assert (=> b!14385 (or (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) (bvand (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(declare-fun lt!22000 () (_ BitVec 64))

(declare-fun b!14383 () Bool)

(declare-fun e!8881 () tuple3!102)

(declare-fun lt!21999 () (_ BitVec 32))

(assert (=> b!14383 (= e!8881 (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!21999 lt!22000))))

(declare-fun d!4660 () Bool)

(assert (=> d!4660 e!8880))

(declare-fun res!13604 () Bool)

(assert (=> d!4660 (=> (not res!13604) (not e!8880))))

(declare-fun lt!22002 () (_ BitVec 32))

(assert (=> d!4660 (= res!13604 (bvsle (_2!898 lt!22001) (bvsub lt!22002 #b00000000000000000000000000000001)))))

(assert (=> d!4660 (or (= (bvand lt!22002 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand lt!22002 #b10000000000000000000000000000000) (bvand (bvsub lt!22002 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(assert (=> d!4660 (= lt!22002 #b00000000000000000000000000001000)))

(assert (=> d!4660 (= lt!22001 e!8881)))

(declare-fun c!984 () Bool)

(assert (=> d!4660 (= c!984 (bvsge lt!21999 uintSizeInBytes!2))))

(assert (=> d!4660 (= lt!21999 (bvsub lt!21983 #b00000000000000000000000000000001))))

(assert (=> d!4660 (= lt!22000 (bvor lt!21984 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) lt!21983)))))

(assert (=> d!4660 (and (bvsle lt!21983 #b00000000000000000000000000000111) (bvsge lt!21983 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)) (bvsge lt!21983 uintSizeInBytes!2))))

(assert (=> d!4660 (= (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!21983 lt!21984) lt!22001)))

(declare-fun b!14384 () Bool)

(declare-fun Unit!1187 () Unit!1177)

(assert (=> b!14384 (= e!8881 (tuple3!103 Unit!1187 lt!21999 lt!22000))))

(assert (= (and d!4660 c!984) b!14383))

(assert (= (and d!4660 (not c!984)) b!14384))

(assert (= (and d!4660 res!13604) b!14385))

(assert (= (and b!14385 res!13605) b!14386))

(declare-fun m!20823 () Bool)

(assert (=> b!14383 m!20823))

(declare-fun m!20825 () Bool)

(assert (=> d!4660 m!20825))

(assert (=> b!14367 d!4660))

(push 1)

(assert (not b!14383))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun b!14402 () Bool)

(declare-fun e!8888 () Bool)

(declare-fun lt!22017 () tuple3!102)

(assert (=> b!14402 (= e!8888 (bvslt (_2!898 lt!22017) uintSizeInBytes!2))))

(declare-fun b!14401 () Bool)

(declare-fun res!13613 () Bool)

(assert (=> b!14401 (=> (not res!13613) (not e!8888))))

(assert (=> b!14401 (= res!13613 (bvsge (_2!898 lt!22017) (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)))))

(assert (=> b!14401 (or (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) (bvand (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(declare-fun lt!22015 () (_ BitVec 32))

(declare-fun b!14399 () Bool)

(declare-fun e!8889 () tuple3!102)

(declare-fun lt!22016 () (_ BitVec 64))

(assert (=> b!14399 (= e!8889 (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!22015 lt!22016))))

(declare-fun d!4668 () Bool)

(assert (=> d!4668 e!8888))

(declare-fun res!13612 () Bool)

(assert (=> d!4668 (=> (not res!13612) (not e!8888))))

(declare-fun lt!22018 () (_ BitVec 32))

(assert (=> d!4668 (= res!13612 (bvsle (_2!898 lt!22017) (bvsub lt!22018 #b00000000000000000000000000000001)))))

(assert (=> d!4668 (or (= (bvand lt!22018 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand lt!22018 #b10000000000000000000000000000000) (bvand (bvsub lt!22018 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(assert (=> d!4668 (= lt!22018 #b00000000000000000000000000001000)))

(assert (=> d!4668 (= lt!22017 e!8889)))

(declare-fun c!988 () Bool)

(assert (=> d!4668 (= c!988 (bvsge lt!22015 uintSizeInBytes!2))))

(assert (=> d!4668 (= lt!22015 (bvsub lt!21999 #b00000000000000000000000000000001))))

(assert (=> d!4668 (= lt!22016 (bvor lt!22000 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) lt!21999)))))

(assert (=> d!4668 (and (bvsle lt!21999 #b00000000000000000000000000000111) (bvsge lt!21999 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)) (bvsge lt!21999 uintSizeInBytes!2))))

(assert (=> d!4668 (= (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!21999 lt!22000) lt!22017)))

(declare-fun b!14400 () Bool)

(declare-fun Unit!1191 () Unit!1177)

(assert (=> b!14400 (= e!8889 (tuple3!103 Unit!1191 lt!22015 lt!22016))))

(assert (= (and d!4668 c!988) b!14399))

(assert (= (and d!4668 (not c!988)) b!14400))

(assert (= (and d!4668 res!13612) b!14401))

(assert (= (and b!14401 res!13613) b!14402))

(declare-fun m!20839 () Bool)

(assert (=> b!14399 m!20839))

(declare-fun m!20841 () Bool)

(assert (=> d!4668 m!20841))

(assert (=> b!14383 d!4668))

(push 1)

(assert (not b!14399))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun b!14418 () Bool)

(declare-fun e!8896 () Bool)

(declare-fun lt!22033 () tuple3!102)

(assert (=> b!14418 (= e!8896 (bvslt (_2!898 lt!22033) uintSizeInBytes!2))))

(declare-fun b!14417 () Bool)

(declare-fun res!13621 () Bool)

(assert (=> b!14417 (=> (not res!13621) (not e!8896))))

(assert (=> b!14417 (= res!13621 (bvsge (_2!898 lt!22033) (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)))))

(assert (=> b!14417 (or (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) (bvand (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(declare-fun b!14415 () Bool)

(declare-fun lt!22031 () (_ BitVec 32))

(declare-fun e!8897 () tuple3!102)

(declare-fun lt!22032 () (_ BitVec 64))

(assert (=> b!14415 (= e!8897 (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!22031 lt!22032))))

(declare-fun d!4676 () Bool)

(assert (=> d!4676 e!8896))

(declare-fun res!13620 () Bool)

(assert (=> d!4676 (=> (not res!13620) (not e!8896))))

(declare-fun lt!22034 () (_ BitVec 32))

(assert (=> d!4676 (= res!13620 (bvsle (_2!898 lt!22033) (bvsub lt!22034 #b00000000000000000000000000000001)))))

(assert (=> d!4676 (or (= (bvand lt!22034 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand lt!22034 #b10000000000000000000000000000000) (bvand (bvsub lt!22034 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(assert (=> d!4676 (= lt!22034 #b00000000000000000000000000001000)))

(assert (=> d!4676 (= lt!22033 e!8897)))

(declare-fun c!992 () Bool)

(assert (=> d!4676 (= c!992 (bvsge lt!22031 uintSizeInBytes!2))))

(assert (=> d!4676 (= lt!22031 (bvsub lt!22015 #b00000000000000000000000000000001))))

(assert (=> d!4676 (= lt!22032 (bvor lt!22016 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) lt!22015)))))

(assert (=> d!4676 (and (bvsle lt!22015 #b00000000000000000000000000000111) (bvsge lt!22015 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)) (bvsge lt!22015 uintSizeInBytes!2))))

(assert (=> d!4676 (= (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!22015 lt!22016) lt!22033)))

(declare-fun b!14416 () Bool)

(declare-fun Unit!1195 () Unit!1177)

(assert (=> b!14416 (= e!8897 (tuple3!103 Unit!1195 lt!22031 lt!22032))))

(assert (= (and d!4676 c!992) b!14415))

(assert (= (and d!4676 (not c!992)) b!14416))

(assert (= (and d!4676 res!13620) b!14417))

(assert (= (and b!14417 res!13621) b!14418))

(declare-fun m!20855 () Bool)

(assert (=> b!14415 m!20855))

(declare-fun m!20857 () Bool)

(assert (=> d!4676 m!20857))

(assert (=> b!14399 d!4676))

(push 1)

(assert (not b!14415))

(check-sat)

