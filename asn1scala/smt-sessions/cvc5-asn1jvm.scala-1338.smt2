; Options: -q --produce-models --incremental --print-success --lang smt2.6
(declare-fun start!37480 () Bool)

(assert start!37480)

(declare-fun res!141064 () Bool)

(declare-fun e!118440 () Bool)

(assert (=> start!37480 (=> (not res!141064) (not e!118440))))

(declare-fun uintSizeInBytes!5 () (_ BitVec 32))

(declare-fun v!147 () (_ BitVec 64))

(declare-fun i!474 () (_ BitVec 32))

(declare-datatypes ((Unit!11933 0))(
  ( (Unit!11934) )
))
(declare-datatypes ((ControlFlow!76 0))(
  ( (Return!75 (value!6911 (_ BitVec 64))) (Proceed!75 (value!6912 Unit!11933)) )
))
(declare-fun Unit!11935 () Unit!11933)

(assert (=> start!37480 (= res!141064 (and (bvsge uintSizeInBytes!5 #b00000000000000000000000000000001) (bvsle uintSizeInBytes!5 #b00000000000000000000000000001001) (not (is-Return!75 (ite (bvsle (bvand v!147 (bvshl #b0000000000000000000000000000000000000000000000000000000010000000 ((_ sign_extend 32) (bvmul #b00000000000000000000000000001000 (bvsub uintSizeInBytes!5 #b00000000000000000000000000000001))))) #b0000000000000000000000000000000000000000000000000000000000000000) (Return!75 v!147) (Proceed!75 Unit!11935)))) (bvsle i!474 #b00000000000000000000000000000111) (bvsge i!474 (bvsub uintSizeInBytes!5 #b00000000000000000000000000000001)) (bvsge i!474 uintSizeInBytes!5) (bvsge (bvsub i!474 #b00000000000000000000000000000001) uintSizeInBytes!5)))))

(assert (=> start!37480 e!118440))

(assert (=> start!37480 true))

(declare-fun b!169757 () Bool)

(declare-fun res!141065 () Bool)

(assert (=> b!169757 (=> (not res!141065) (not e!118440))))

(declare-fun vv!30 () (_ BitVec 64))

(declare-datatypes ((tuple3!984 0))(
  ( (tuple3!985 (_1!7948 Unit!11933) (_2!7948 (_ BitVec 32)) (_3!618 (_ BitVec 64))) )
))
(declare-fun uint2intWhile!0 ((_ BitVec 32) (_ BitVec 64) (_ BitVec 32) (_ BitVec 64)) tuple3!984)

(assert (=> b!169757 (= res!141065 (bvsle (_2!7948 (uint2intWhile!0 uintSizeInBytes!5 v!147 (bvsub i!474 #b00000000000000000000000000000001) (bvor vv!30 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) i!474)))) #b00000000000000000000000000000111))))

(declare-fun b!169758 () Bool)

(assert (=> b!169758 (= e!118440 (and (not (= (bvand uintSizeInBytes!5 #b10000000000000000000000000000000) #b00000000000000000000000000000000)) (not (= (bvand uintSizeInBytes!5 #b10000000000000000000000000000000) (bvand (bvsub uintSizeInBytes!5 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))))

(assert (= (and start!37480 res!141064) b!169757))

(assert (= (and b!169757 res!141065) b!169758))

(declare-fun m!269541 () Bool)

(assert (=> b!169757 m!269541))

(declare-fun m!269543 () Bool)

(assert (=> b!169757 m!269543))

(push 1)

(assert (not b!169757))

(check-sat)

(pop 1)

(push 1)

(check-sat)

