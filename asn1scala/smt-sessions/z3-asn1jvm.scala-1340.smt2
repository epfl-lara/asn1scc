; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!37498 () Bool)

(assert start!37498)

(declare-fun res!141104 () Bool)

(declare-fun e!118473 () Bool)

(assert (=> start!37498 (=> (not res!141104) (not e!118473))))

(declare-fun uintSizeInBytes!5 () (_ BitVec 32))

(declare-fun v!147 () (_ BitVec 64))

(declare-fun i!474 () (_ BitVec 32))

(get-info :version)

(declare-datatypes ((Unit!11956 0))(
  ( (Unit!11957) )
))
(declare-datatypes ((ControlFlow!83 0))(
  ( (Return!82 (value!6935 (_ BitVec 64))) (Proceed!82 (value!6936 Unit!11956)) )
))
(declare-fun Unit!11958 () Unit!11956)

(assert (=> start!37498 (= res!141104 (and (bvsge uintSizeInBytes!5 #b00000000000000000000000000000001) (bvsle uintSizeInBytes!5 #b00000000000000000000000000001001) (not ((_ is Return!82) (ite (bvsle (bvand v!147 (bvshl #b0000000000000000000000000000000000000000000000000000000010000000 ((_ sign_extend 32) (bvmul #b00000000000000000000000000001000 (bvsub uintSizeInBytes!5 #b00000000000000000000000000000001))))) #b0000000000000000000000000000000000000000000000000000000000000000) (Return!82 v!147) (Proceed!82 Unit!11958)))) (bvsle i!474 #b00000000000000000000000000000111) (bvsge i!474 (bvsub uintSizeInBytes!5 #b00000000000000000000000000000001)) (bvsge i!474 uintSizeInBytes!5) (bvsge (bvsub i!474 #b00000000000000000000000000000001) uintSizeInBytes!5)))))

(assert (=> start!37498 e!118473))

(assert (=> start!37498 true))

(declare-fun vv!30 () (_ BitVec 64))

(declare-fun b!169809 () Bool)

(declare-datatypes ((tuple3!998 0))(
  ( (tuple3!999 (_1!7955 Unit!11956) (_2!7955 (_ BitVec 32)) (_3!625 (_ BitVec 64))) )
))
(declare-fun uint2intWhile!0 ((_ BitVec 32) (_ BitVec 64) (_ BitVec 32) (_ BitVec 64)) tuple3!998)

(assert (=> b!169809 (= e!118473 (bvsge (_2!7955 (uint2intWhile!0 uintSizeInBytes!5 v!147 (bvsub i!474 #b00000000000000000000000000000001) (bvor vv!30 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) i!474)))) uintSizeInBytes!5))))

(assert (= (and start!37498 res!141104) b!169809))

(declare-fun m!269577 () Bool)

(assert (=> b!169809 m!269577))

(declare-fun m!269579 () Bool)

(assert (=> b!169809 m!269579))

(check-sat (not b!169809))
(check-sat)
(get-model)

(declare-fun b!169821 () Bool)

(declare-fun e!118481 () tuple3!998)

(declare-fun lt!262317 () (_ BitVec 32))

(declare-fun lt!262316 () (_ BitVec 64))

(assert (=> b!169821 (= e!118481 (uint2intWhile!0 uintSizeInBytes!5 v!147 lt!262317 lt!262316))))

(declare-fun b!169822 () Bool)

(declare-fun Unit!11962 () Unit!11956)

(assert (=> b!169822 (= e!118481 (tuple3!999 Unit!11962 lt!262317 lt!262316))))

(declare-fun b!169823 () Bool)

(declare-fun res!141112 () Bool)

(declare-fun e!118482 () Bool)

(assert (=> b!169823 (=> (not res!141112) (not e!118482))))

(declare-fun lt!262315 () tuple3!998)

(assert (=> b!169823 (= res!141112 (bvsge (_2!7955 lt!262315) (bvsub uintSizeInBytes!5 #b00000000000000000000000000000001)))))

(assert (=> b!169823 (or (= (bvand uintSizeInBytes!5 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand uintSizeInBytes!5 #b10000000000000000000000000000000) (bvand (bvsub uintSizeInBytes!5 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(declare-fun b!169824 () Bool)

(assert (=> b!169824 (= e!118482 (bvslt (_2!7955 lt!262315) uintSizeInBytes!5))))

(declare-fun d!60007 () Bool)

(assert (=> d!60007 e!118482))

(declare-fun res!141113 () Bool)

(assert (=> d!60007 (=> (not res!141113) (not e!118482))))

(declare-fun lt!262318 () (_ BitVec 32))

(assert (=> d!60007 (= res!141113 (bvsle (_2!7955 lt!262315) (bvsub lt!262318 #b00000000000000000000000000000001)))))

(assert (=> d!60007 (or (= (bvand lt!262318 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand lt!262318 #b10000000000000000000000000000000) (bvand (bvsub lt!262318 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(assert (=> d!60007 (= lt!262318 #b00000000000000000000000000001000)))

(assert (=> d!60007 (= lt!262315 e!118481)))

(declare-fun c!8774 () Bool)

(assert (=> d!60007 (= c!8774 (bvsge lt!262317 uintSizeInBytes!5))))

(assert (=> d!60007 (= lt!262317 (bvsub (bvsub i!474 #b00000000000000000000000000000001) #b00000000000000000000000000000001))))

(assert (=> d!60007 (= lt!262316 (bvor (bvor vv!30 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) i!474)) (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) (bvsub i!474 #b00000000000000000000000000000001))))))

(assert (=> d!60007 (and (bvsle (bvsub i!474 #b00000000000000000000000000000001) #b00000000000000000000000000000111) (bvsge (bvsub i!474 #b00000000000000000000000000000001) (bvsub uintSizeInBytes!5 #b00000000000000000000000000000001)) (bvsge (bvsub i!474 #b00000000000000000000000000000001) uintSizeInBytes!5))))

(assert (=> d!60007 (= (uint2intWhile!0 uintSizeInBytes!5 v!147 (bvsub i!474 #b00000000000000000000000000000001) (bvor vv!30 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) i!474))) lt!262315)))

(assert (= (and d!60007 c!8774) b!169821))

(assert (= (and d!60007 (not c!8774)) b!169822))

(assert (= (and d!60007 res!141113) b!169823))

(assert (= (and b!169823 res!141112) b!169824))

(declare-fun m!269585 () Bool)

(assert (=> b!169821 m!269585))

(declare-fun m!269587 () Bool)

(assert (=> d!60007 m!269587))

(assert (=> b!169809 d!60007))

(check-sat (not b!169821))
(check-sat)
