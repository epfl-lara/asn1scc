; Options: -q --produce-models --incremental --print-success --lang smt2.6
(declare-fun start!3198 () Bool)

(assert start!3198)

(declare-fun res!13630 () Bool)

(declare-fun e!8914 () Bool)

(assert (=> start!3198 (=> (not res!13630) (not e!8914))))

(declare-fun uintSizeInBytes!2 () (_ BitVec 32))

(declare-fun v!144 () (_ BitVec 64))

(declare-datatypes ((Unit!1204 0))(
  ( (Unit!1205) )
))
(declare-datatypes ((ControlFlow!21 0))(
  ( (Return!20 (value!776 (_ BitVec 64))) (Proceed!20 (value!777 Unit!1204)) )
))
(declare-fun Unit!1206 () Unit!1204)

(assert (=> start!3198 (= res!13630 (and (bvsge uintSizeInBytes!2 #b00000000000000000000000000000001) (bvsle uintSizeInBytes!2 #b00000000000000000000000000001001) (not (is-Return!20 (ite (bvsle (bvand v!144 (bvshl #b0000000000000000000000000000000000000000000000000000000010000000 ((_ sign_extend 32) (bvmul #b00000000000000000000000000001000 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001))))) #b0000000000000000000000000000000000000000000000000000000000000000) (Return!20 v!144) (Proceed!20 Unit!1206))))))))

(assert (=> start!3198 e!8914))

(assert (=> start!3198 true))

(declare-fun b!14443 () Bool)

(declare-fun lt!22051 () (_ BitVec 64))

(declare-fun lt!22052 () (_ BitVec 64))

(assert (=> b!14443 (= e!8914 (and (not (= lt!22051 #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= lt!22051 (bvand (bvsub lt!22052 #b0000000000000000000000000000000000000000000000000000000000000001) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> b!14443 (= lt!22051 (bvand lt!22052 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-datatypes ((tuple3!108 0))(
  ( (tuple3!109 (_1!901 Unit!1204) (_2!901 (_ BitVec 32)) (_3!60 (_ BitVec 64))) )
))
(declare-fun e!8915 () tuple3!108)

(assert (=> b!14443 (= lt!22052 (bvneg (bvnot (_3!60 e!8915))))))

(declare-fun c!1001 () Bool)

(assert (=> b!14443 (= c!1001 (bvsge #b00000000000000000000000000000111 uintSizeInBytes!2))))

(declare-fun b!14444 () Bool)

(declare-fun uint2intWhile!0 ((_ BitVec 32) (_ BitVec 64) (_ BitVec 32) (_ BitVec 64)) tuple3!108)

(assert (=> b!14444 (= e!8915 (uint2intWhile!0 uintSizeInBytes!2 v!144 #b00000000000000000000000000000111 v!144))))

(declare-fun b!14445 () Bool)

(declare-fun Unit!1207 () Unit!1204)

(assert (=> b!14445 (= e!8915 (tuple3!109 Unit!1207 #b00000000000000000000000000000111 v!144))))

(assert (= (and start!3198 res!13630) b!14443))

(assert (= (and b!14443 c!1001) b!14444))

(assert (= (and b!14443 (not c!1001)) b!14445))

(declare-fun m!20863 () Bool)

(assert (=> b!14444 m!20863))

(push 1)

(assert (not b!14444))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun b!14485 () Bool)

(declare-fun e!8935 () Bool)

(declare-fun lt!22089 () tuple3!108)

(assert (=> b!14485 (= e!8935 (bvslt (_2!901 lt!22089) uintSizeInBytes!2))))

(declare-fun b!14484 () Bool)

(declare-fun res!13650 () Bool)

(assert (=> b!14484 (=> (not res!13650) (not e!8935))))

(assert (=> b!14484 (= res!13650 (bvsge (_2!901 lt!22089) (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)))))

(assert (=> b!14484 (or (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) (bvand (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(declare-fun d!4684 () Bool)

(assert (=> d!4684 e!8935))

(declare-fun res!13649 () Bool)

(assert (=> d!4684 (=> (not res!13649) (not e!8935))))

(declare-fun lt!22091 () (_ BitVec 32))

(assert (=> d!4684 (= res!13649 (bvsle (_2!901 lt!22089) (bvsub lt!22091 #b00000000000000000000000000000001)))))

(assert (=> d!4684 (or (= (bvand lt!22091 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand lt!22091 #b10000000000000000000000000000000) (bvand (bvsub lt!22091 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(assert (=> d!4684 (= lt!22091 #b00000000000000000000000000001000)))

(declare-fun e!8934 () tuple3!108)

(assert (=> d!4684 (= lt!22089 e!8934)))

(declare-fun c!1011 () Bool)

(declare-fun lt!22092 () (_ BitVec 32))

(assert (=> d!4684 (= c!1011 (bvsge lt!22092 uintSizeInBytes!2))))

(assert (=> d!4684 (= lt!22092 (bvsub #b00000000000000000000000000000111 #b00000000000000000000000000000001))))

(declare-fun lt!22090 () (_ BitVec 64))

(assert (=> d!4684 (= lt!22090 (bvor v!144 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111)))))

(assert (=> d!4684 (and (bvsle #b00000000000000000000000000000111 #b00000000000000000000000000000111) (bvsge #b00000000000000000000000000000111 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)) (bvsge #b00000000000000000000000000000111 uintSizeInBytes!2))))

(assert (=> d!4684 (= (uint2intWhile!0 uintSizeInBytes!2 v!144 #b00000000000000000000000000000111 v!144) lt!22089)))

(declare-fun b!14482 () Bool)

(assert (=> b!14482 (= e!8934 (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!22092 lt!22090))))

(declare-fun b!14483 () Bool)

(declare-fun Unit!1211 () Unit!1204)

(assert (=> b!14483 (= e!8934 (tuple3!109 Unit!1211 lt!22092 lt!22090))))

(assert (= (and d!4684 c!1011) b!14482))

(assert (= (and d!4684 (not c!1011)) b!14483))

(assert (= (and d!4684 res!13649) b!14484))

(assert (= (and b!14484 res!13650) b!14485))

(declare-fun m!20877 () Bool)

(assert (=> d!4684 m!20877))

(declare-fun m!20879 () Bool)

(assert (=> b!14482 m!20879))

(assert (=> b!14444 d!4684))

(push 1)

(assert (not b!14482))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun b!14497 () Bool)

(declare-fun e!8941 () Bool)

(declare-fun lt!22101 () tuple3!108)

(assert (=> b!14497 (= e!8941 (bvslt (_2!901 lt!22101) uintSizeInBytes!2))))

(declare-fun b!14496 () Bool)

(declare-fun res!13656 () Bool)

(assert (=> b!14496 (=> (not res!13656) (not e!8941))))

(assert (=> b!14496 (= res!13656 (bvsge (_2!901 lt!22101) (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)))))

(assert (=> b!14496 (or (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) (bvand (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(declare-fun d!4692 () Bool)

(assert (=> d!4692 e!8941))

(declare-fun res!13655 () Bool)

(assert (=> d!4692 (=> (not res!13655) (not e!8941))))

(declare-fun lt!22103 () (_ BitVec 32))

(assert (=> d!4692 (= res!13655 (bvsle (_2!901 lt!22101) (bvsub lt!22103 #b00000000000000000000000000000001)))))

(assert (=> d!4692 (or (= (bvand lt!22103 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand lt!22103 #b10000000000000000000000000000000) (bvand (bvsub lt!22103 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(assert (=> d!4692 (= lt!22103 #b00000000000000000000000000001000)))

(declare-fun e!8940 () tuple3!108)

(assert (=> d!4692 (= lt!22101 e!8940)))

(declare-fun c!1014 () Bool)

(declare-fun lt!22104 () (_ BitVec 32))

(assert (=> d!4692 (= c!1014 (bvsge lt!22104 uintSizeInBytes!2))))

(assert (=> d!4692 (= lt!22104 (bvsub lt!22092 #b00000000000000000000000000000001))))

(declare-fun lt!22102 () (_ BitVec 64))

(assert (=> d!4692 (= lt!22102 (bvor lt!22090 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) lt!22092)))))

(assert (=> d!4692 (and (bvsle lt!22092 #b00000000000000000000000000000111) (bvsge lt!22092 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)) (bvsge lt!22092 uintSizeInBytes!2))))

(assert (=> d!4692 (= (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!22092 lt!22090) lt!22101)))

(declare-fun b!14494 () Bool)

(assert (=> b!14494 (= e!8940 (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!22104 lt!22102))))

(declare-fun b!14495 () Bool)

(declare-fun Unit!1215 () Unit!1204)

(assert (=> b!14495 (= e!8940 (tuple3!109 Unit!1215 lt!22104 lt!22102))))

(assert (= (and d!4692 c!1014) b!14494))

(assert (= (and d!4692 (not c!1014)) b!14495))

(assert (= (and d!4692 res!13655) b!14496))

(assert (= (and b!14496 res!13656) b!14497))

(declare-fun m!20889 () Bool)

(assert (=> d!4692 m!20889))

(declare-fun m!20891 () Bool)

(assert (=> b!14494 m!20891))

(assert (=> b!14482 d!4692))

(push 1)

(assert (not b!14494))

(check-sat)

(pop 1)

(push 1)

(check-sat)

(get-model)

(pop 1)

(declare-fun b!14513 () Bool)

(declare-fun e!8949 () Bool)

(declare-fun lt!22117 () tuple3!108)

(assert (=> b!14513 (= e!8949 (bvslt (_2!901 lt!22117) uintSizeInBytes!2))))

(declare-fun b!14512 () Bool)

(declare-fun res!13664 () Bool)

(assert (=> b!14512 (=> (not res!13664) (not e!8949))))

(assert (=> b!14512 (= res!13664 (bvsge (_2!901 lt!22117) (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)))))

(assert (=> b!14512 (or (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand uintSizeInBytes!2 #b10000000000000000000000000000000) (bvand (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(declare-fun d!4700 () Bool)

(assert (=> d!4700 e!8949))

(declare-fun res!13663 () Bool)

(assert (=> d!4700 (=> (not res!13663) (not e!8949))))

(declare-fun lt!22119 () (_ BitVec 32))

(assert (=> d!4700 (= res!13663 (bvsle (_2!901 lt!22117) (bvsub lt!22119 #b00000000000000000000000000000001)))))

(assert (=> d!4700 (or (= (bvand lt!22119 #b10000000000000000000000000000000) #b00000000000000000000000000000000) (= (bvand lt!22119 #b10000000000000000000000000000000) (bvand (bvsub lt!22119 #b00000000000000000000000000000001) #b10000000000000000000000000000000)))))

(assert (=> d!4700 (= lt!22119 #b00000000000000000000000000001000)))

(declare-fun e!8948 () tuple3!108)

(assert (=> d!4700 (= lt!22117 e!8948)))

(declare-fun c!1018 () Bool)

(declare-fun lt!22120 () (_ BitVec 32))

(assert (=> d!4700 (= c!1018 (bvsge lt!22120 uintSizeInBytes!2))))

(assert (=> d!4700 (= lt!22120 (bvsub lt!22104 #b00000000000000000000000000000001))))

(declare-fun lt!22118 () (_ BitVec 64))

(assert (=> d!4700 (= lt!22118 (bvor lt!22102 (select (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 64))) #b0000000000000000000000000000000000000000000000000000000000000000) #b00000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000011111111) #b00000000000000000000000000000001 #b0000000000000000000000000000000000000000000000001111111100000000) #b00000000000000000000000000000010 #b0000000000000000000000000000000000000000111111110000000000000000) #b00000000000000000000000000000011 #b0000000000000000000000000000000011111111000000000000000000000000) #b00000000000000000000000000000100 #b0000000000000000000000001111111100000000000000000000000000000000) #b00000000000000000000000000000101 #b0000000000000000111111110000000000000000000000000000000000000000) #b00000000000000000000000000000110 #b0000000011111111000000000000000000000000000000000000000000000000) #b00000000000000000000000000000111 #b1111111100000000000000000000000000000000000000000000000000000000) lt!22104)))))

(assert (=> d!4700 (and (bvsle lt!22104 #b00000000000000000000000000000111) (bvsge lt!22104 (bvsub uintSizeInBytes!2 #b00000000000000000000000000000001)) (bvsge lt!22104 uintSizeInBytes!2))))

(assert (=> d!4700 (= (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!22104 lt!22102) lt!22117)))

(declare-fun b!14510 () Bool)

(assert (=> b!14510 (= e!8948 (uint2intWhile!0 uintSizeInBytes!2 v!144 lt!22120 lt!22118))))

(declare-fun b!14511 () Bool)

(declare-fun Unit!1218 () Unit!1204)

(assert (=> b!14511 (= e!8948 (tuple3!109 Unit!1218 lt!22120 lt!22118))))

(assert (= (and d!4700 c!1018) b!14510))

(assert (= (and d!4700 (not c!1018)) b!14511))

(assert (= (and d!4700 res!13663) b!14512))

(assert (= (and b!14512 res!13664) b!14513))

(declare-fun m!20905 () Bool)

(assert (=> d!4700 m!20905))

(declare-fun m!20907 () Bool)

(assert (=> b!14510 m!20907))

(assert (=> b!14494 d!4700))

(push 1)

(assert (not b!14510))

(check-sat)

(pop 1)

(push 1)

(check-sat)

